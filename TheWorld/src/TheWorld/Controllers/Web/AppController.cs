#region Includes
using Microsoft.AspNetCore.Mvc;
using TheWorld.ViewModels;
using TheWorld.Services;
using Microsoft.Extensions.Configuration;
using TheWorld.Models;
using Microsoft.Extensions.Logging;
using Microsoft.AspNetCore.Authorization;
#endregion

// For more information on enabling MVC for empty projects, visit http://go.microsoft.com/fwlink/?LinkID=397860

namespace TheWorld.Controllers.Web
{
    public class AppController : Controller
    {
        private IMailService _mailService;
        private IConfigurationRoot _config;
        private WorldContext _context;
        private IWorldRepository _repository;
        private ILogger<AppController> _logger;

        // this constructor's going to take in our interface IMailService because our app controller now needs that actual service to implement that post method.
        // the reason we're using the controller to do this, is that when this controller is created, is generated by the request, it's going to see whatever's in the constructor
        public AppController(IMailService mailService, 
            IConfigurationRoot config,
                                            // WorldContext context) we use the constructor to inject the mail service and configuration data. We are going to replace the Injection of the context with the Injection of the WorldRepository
            IWorldRepository repository,
            ILogger<AppController> logger)  
        {
            _mailService = mailService;
            _config = config;
                                            //            _context = context;         // store here in the App Controller Class.
            _repository = repository;
            _logger     = logger;           // it is going to allow us to look and trap errors see Try/Catch
        }

        // GET: /<controller>/
        public IActionResult Index()
        {
            //try
            //{
            //    //            var data = _context.Trips.ToList(); because the use of the WorldRepository then I can get all trips instead. it is better to use the queries from the Repository.
            //    var data = _repository.GetAllTrips();  // now we're getting the trips thru the Repository.

            //    ViewBag.Title = "Home Page";
            //    return View(data);
            //}
            //catch (Exception ex)
            //{

            //    _logger.LogError($"Failed to get trips in Index page: {ex.Message}");
            //    return Redirect("/error");
            //}
            return View();
        }

        //ASP.NET Identity
        [Authorize]
        public IActionResult Trips()
        {
            // due to API client-side code AngularJS Routing.
            //try
            //{
            //    var trips = _repository.GetAllTrips();

            //    return View(trips);
            //}
            //catch (Exception ex)
            //{

            //    _logger.LogError($"Failed to get trips in Index Page: {ex.Message}");
            //    return Redirect("/error");
            //}
            return View();

        }

        public IActionResult Contact()
        {
            //throw new InvalidOperationException("Bad things happen to good developers");
            return View();
        }

        [HttpPost]
        public IActionResult Contact(ContactViewModel model)        // Model Binding.
        {
            if (model.Email.Contains("aol.com")) // this is good for exceptional cases. it is a model error, not a property error.
            {
                ModelState.AddModelError("", "We don't suppport AOL addresses");
            }

            if (ModelState.IsValid)
            {
                _mailService.SendMail(_config["MailSettings:ToAddress"], model.Email, "Email TheWorld", model.Message);


                ModelState.Clear(); // But our form still has the data in it. This will remove all the data from the ModelState, so when we go back to the page in this return View and we clear the form.

                ViewBag.UserMessage = "Message Sent";
            }

            return View();
        }
        public IActionResult About()
        {
            ViewBag.Title = "About Page";
            return View();
        }

    }
}
