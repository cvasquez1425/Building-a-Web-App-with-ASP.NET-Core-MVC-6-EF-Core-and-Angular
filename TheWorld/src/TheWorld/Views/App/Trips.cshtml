@*a row is a container for making grid decisions inside of
    By using these grids we can determine the layout without determining the pixel width, that is the magic of the grid that you never have to deal with the CSS width
*@

@*@model IEnumerable<TheWorld.Models.Trip>*@
@{
    ViewBag.Title = "Home Page";
}

@section Scripts{
    <script src="~/lib/underscore/underscore-min.js"></script>      @*this library allows you to do LINQ-Like queries on the client, doing searches, find and queries.*@
    <script src="~/lib/angular/angular.min.js"></script>
    <script src="~/lib/angular-route/angular-route.min.js"></script>
    <script src="http://maps.google.com/maps/api/js?key=AIzaSyDNx4igQjXdpGMMC-ZMv1nqDolVh218zag"></script>
    @*<script src="https://maps.googleapis.com/maps/api/js"></script>*@
    <script src="~/lib/gmaps/gmaps.min.js"></script>
    <script src="~/lib/travelmap/travelmap.min.js"></script>

    <environment names="Development">
        <script src="~/js/simpleControls.js"></script> @*before we open the browser, we need to take our simpleControl and add them to our view.*@
        <script src="~/js/app-trips.js"></script>
        <script src="~/js/tripsController.js"></script>
        <script src="~/js/tripEditorController.js"></script>
    </environment>

    <environment names="Production,Staging">
        <script src="~/lib/_app/simpleControls.js"></script>
        <script src="~/lib/_app/app-trips.js"></script>
        <script src="~/lib/_app/tripsController.js"></script>
        <script src="~/lib/_app/tripEditorController.js"></script>
    </environment>

}


@*/App/trips#!/ We noticed there's a pound syntax in the route, it was origially invisioned as the interpage linking. What does pound mean, is everything after the pound, is the Client Side Route*@
                @*so what do we have after the pound, the slash that represents this Client Side View.
                    when the other views are shown, is just SWAPPING this fragment of HTML, activate the Controller, or deactivate the Controller
                    as necessary, everything is occuring in the browse without going back to the server to refresh the page.
                    it is just swapping individual piece of functionality and views.*@

<div class="row" ng-app="app-trips">
    @*this is essentially bootstrapping our trips page here with a new module called app-trips.*@

    @*<div ng-show="vm.isBusy" class="text-center"><i class="fa fa-spinner fa-spin"></i>Loading....</div>*@

    @*  vm use for data-binding. bind to get the data our of the tripsController*@
            @*<div ng-controller="tripsController as vm" class="col-md-6 col-md-offset-3">
            <div class="text-danger" ng-show=vm.errorMessage>{{ vm.errorMessage }} </div>
            <div ng-show="vm.isBusy" class="text-center"><i class="fa fa-spin fa-spinner"></i>Loading...</div>
            <wait-cursor display-when="vm.isBusy"></wait-cursor> @*Replace the line above. Reusable component inside our app.s
                {{ vm.name }}
                Basic Data Binding
            <table class="table table-responsive table-striped>
            <tr ng-repeat="trip in vm.trips">
                <td>{{ trip.name }}</td>
                <td>{{ trip.created | date:'MM-dd-yyyy' }}</td>      using date filter(i.e., formatter, or small piece of data to display something) define by using a pipe and the name of the filter.
                                                        in our case is the date filer to format the date.
            </tr>
            </table>

            <form novalidate name="newTripForm" ng-submit="vm.addTrip()"> call the addTrip function on a vm.
            <div class="form-group">
                <label for="name">Trip Name</label>  "label for" if someone clicl on the label itself, it'll take them to this input.
                                                                ng-model directive: in order to allow this form to take the data we type in and push it into that newTrip {}
                                                                even though name property does not exist, it'll create it if necessary.
                <input class="form-control" type="text" id="name" name="name" ng-model="vm.newTrip.name" required ng-minlength="5" />
                <span ng-show="newTripForm.name.$error.required" class="text-warning">Name is required</span> .$ extend the name property, required is the type of validation.
                <span ng-show="newTripForm.name.$error.minlength" class="text-warning">Must be at least five characters</span>
            </div>
            <div class="form-group">
                <input type="submit" value="Add" class="btn btn-success btn-sm"
                       ng-disabled="newTripForm.$invalid" />  new directive to disable the button until the is valid. In Angular, $ Dollar sign extending a property, a module in Angular.
            </div>
           </form>
        </div>*@    

    <div ng-view></div>   @*Special directive for this particular page that we are using a module for, . A place for the view like a placeholder*@

</div>